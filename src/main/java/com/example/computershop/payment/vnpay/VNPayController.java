package com.example.computershop.payment.vnpay;

import com.example.computershop.dto.request.CheckoutRequest;
import com.example.computershop.entity.Cart;
import com.example.computershop.entity.Order;
import com.example.computershop.entity.Payment;
import com.example.computershop.entity.User;
import com.example.computershop.repository.PaymentRepository;
import com.example.computershop.service.CartService;
import com.example.computershop.service.OrderService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

import java.math.BigDecimal;
import java.security.Principal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Controller
@RequestMapping("/payment")
public class VNPayController {
    
    @Autowired
    private VNPayService vnPayService;
    
    @Autowired
    private OrderService orderService;
    
    @Autowired
    private PaymentRepository paymentRepository;
    
    @Autowired
    private CartService cartService;
    
    @Autowired
    private com.example.computershop.service.CheckoutService checkoutService;

    // Hi·ªÉn th·ªã trang QR Code cho thanh to√°n VNPay
    @GetMapping("/vnpay/qr")
    public String showVNPayQR(HttpServletRequest request, Model model,
                               @RequestParam("fullName") String fullName,
                               @RequestParam("phone") String phone,
                               @RequestParam("address") String address,
                               @RequestParam("city") String city,
                               @RequestParam("region") String region,
                               @RequestParam(value = "district", required = false) String district,
                               @RequestParam(value = "ward", required = false) String ward,
                               @RequestParam(value = "note", required = false) String note,
                               @RequestParam("paymentMethod") String paymentMethod,
                               @RequestParam("shippingMethod") String shippingMethod,
                               @RequestParam(value = "distance", required = false) Double distance,
                               @RequestParam(value = "shippingFee", required = false) Long shippingFee,
                               Principal principal) {
        
        try {
            // L·∫•y user hi·ªán t·∫°i
            User user = cartService.getUserFromPrincipal(principal);
            if (user == null) {
                model.addAttribute("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n");
                return "payment/error";
            }
            
            // L·∫•y cart c·ªßa user
            List<Cart> cartItems = cartService.getCurrentUserCart(principal);
            if (cartItems == null || cartItems.isEmpty()) {
                model.addAttribute("error", "Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n");
                return "payment/error";
            }
            
            // T√≠nh t·ªïng ti·ªÅn t·ª´ cart
            Map<String, Object> checkoutData = cartService.prepareCheckoutData(principal);
            Long totalAmount = (Long) checkoutData.get("finalTotal");
            
            if (totalAmount == null || totalAmount <= 0) {
                model.addAttribute("error", "Kh√¥ng th·ªÉ t√≠nh t·ªïng ti·ªÅn ƒë∆°n h√†ng");
                return "payment/error";
            }
            
            // T·∫°o orderId t·∫°m th·ªùi (trong th·ª±c t·∫ø c√≥ th·ªÉ t·∫°o order pending)
            UUID orderId = UUID.randomUUID();
            
            // L∆∞u th√¥ng tin order v√†o Payment entity ƒë·ªÉ tracking
            // T·∫°o CheckoutRequest ƒë·ªÉ x·ª≠ l√Ω sau khi thanh to√°n th√†nh c√¥ng
            CheckoutRequest checkoutRequest = new CheckoutRequest();
            checkoutRequest.setShippingAddress(address);
            checkoutRequest.setCity(city);
            checkoutRequest.setRegion(region);
            checkoutRequest.setDistrict(district);
            checkoutRequest.setWard(ward);
            checkoutRequest.setNote(note);
            checkoutRequest.setPaymentMethod(paymentMethod);
            checkoutRequest.setShippingMethod(shippingMethod);
            checkoutRequest.setDistance(distance);
            checkoutRequest.setShippingFee(shippingFee);
            checkoutRequest.setAlternativeReceiverName(fullName);
            checkoutRequest.setAlternativeReceiverPhone(phone);
            
            // T·∫°o Payment entity ƒë·ªÉ tracking
            Payment payment = new Payment();
            // paymentId s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông generate b·ªüi @GeneratedValue
            payment.setOrderId(orderId);
            payment.setUserId(UUID.fromString(user.getUserId()));
            payment.setPaymentMethod("VNPAY");
            payment.setPaymentStatus("PENDING");
            payment.setPaidAmount(totalAmount);
            payment.setVnpTxnRef(orderId.toString());
            payment.setTransactionId("CHECKOUT_DATA:" + 
                fullName + "|" + phone + "|" + address + "|" + 
                city + "|" + region + "|" + paymentMethod);
            
            // L∆∞u v√†o database
            paymentRepository.save(payment);
            
            // T·∫°o VNPay payment URL sau khi ƒë√£ l∆∞u Payment
            String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort();
            String vnpayUrl = vnPayService.createOrder(request, totalAmount.intValue(), baseUrl, orderId, UUID.fromString(user.getUserId()));
            
            // Extract vnp_TxnRef t·ª´ URL ƒë·ªÉ c·∫≠p nh·∫≠t Payment
            try {
                String txnRef = vnpayUrl.substring(vnpayUrl.indexOf("vnp_TxnRef=") + 11);
                txnRef = txnRef.substring(0, txnRef.indexOf("&"));
                payment.setVnpTxnRef(txnRef);
                paymentRepository.save(payment);
                System.out.println("‚úÖ Updated Payment with vnp_TxnRef: " + txnRef);
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Could not extract vnp_TxnRef from URL: " + e.getMessage());
            }
            
            // Add th√¥ng tin c·∫ßn thi·∫øt v√†o model
            model.addAttribute("vnpayUrl", vnpayUrl);
            model.addAttribute("orderId", orderId);
            model.addAttribute("totalAmount", totalAmount);
            model.addAttribute("fullName", fullName);
            model.addAttribute("phone", phone);
            model.addAttribute("address", address);
            
            return "payment/qr-payment";
            
        } catch (Exception e) {
            model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n: " + e.getMessage());
            return "payment/error";
        }
    }
    
    // API endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n (polling)
    @GetMapping("/vnpay/check-status/{orderId}")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> checkPaymentStatus(@PathVariable UUID orderId) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            Payment payment = paymentRepository.findByOrderId(orderId);
            if (payment != null) {
                response.put("status", payment.getPaymentStatus());
                response.put("transactionId", payment.getTransactionId());
                response.put("paidAt", payment.getPaidAt());
                response.put("success", true);
            } else {
                response.put("status", "PENDING");
                response.put("success", true);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("error", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }

    // Endpoint ƒë·ªÉ user x√°c nh·∫≠n v√† t·∫°o order sau khi thanh to√°n th√†nh c√¥ng
    @PostMapping("/vnpay/confirm-order")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> confirmPaymentAndCreateOrder(@RequestParam String txnRef) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            System.out.println("üåü =========================");
            System.out.println("üåü CONFIRM ORDER ENDPOINT CALLED");
            System.out.println("üåü txnRef received: " + txnRef);
            System.out.println("üåü =========================");
            
            // T√¨m payment by vnp_TxnRef
            System.out.println("üîç Searching for payment with vnp_TxnRef: " + txnRef);
            Payment payment = paymentRepository.findByVnpTxnRef(txnRef);
            
            if (payment == null) {
                System.err.println("‚ùå PAYMENT NOT FOUND for txnRef: " + txnRef);
                
                response.put("success", false);
                response.put("message", "Payment not found for txnRef: " + txnRef);
                return ResponseEntity.status(404).body(response);
            }
            
            System.out.println("‚úÖ PAYMENT FOUND!");
            System.out.println("  - Payment ID: " + payment.getPaymentId());
            System.out.println("  - Payment Status: " + payment.getPaymentStatus());
            System.out.println("  - User ID: " + payment.getUserId());
            System.out.println("  - Order ID: " + payment.getOrderId());
            System.out.println("  - Transaction ID: " + payment.getTransactionId());
            
            if (!"PAID".equals(payment.getPaymentStatus())) {
                System.err.println("‚ùå PAYMENT NOT PAID! Status: " + payment.getPaymentStatus());
                response.put("success", false);
                response.put("message", "Payment not completed yet. Status: " + payment.getPaymentStatus());
                return ResponseEntity.status(400).body(response);
            }
            
            // ‚úÖ FIX: Ki·ªÉm tra Order th·ª±c s·ª± trong database, kh√¥ng ch·ªâ payment.getOrderId()
            boolean orderActuallyExists = false;
            if (payment.getOrderId() != null) {
                try {
                    Order existingOrder = orderService.getOrderById(payment.getOrderId().toString());
                    orderActuallyExists = (existingOrder != null);
                    System.out.println("üîç Confirm endpoint - Checked database - Order exists: " + orderActuallyExists + " (OrderId: " + payment.getOrderId() + ")");
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è Confirm endpoint - Error checking Order in database: " + e.getMessage());
                    orderActuallyExists = false;
                }
            }
            
            if (orderActuallyExists) {
                System.out.println("‚úÖ ORDER CONFIRMED TO EXIST IN DATABASE: " + payment.getOrderId());
                response.put("success", true);
                response.put("message", "Order already exists");
                response.put("orderId", payment.getOrderId().toString());
                response.put("alreadyExists", true);
                return ResponseEntity.ok(response);
            }
            
            System.out.println("üöÄ CREATING NEW ORDER...");
            
            // T·∫°o order t·ª´ payment data
            String orderResult = createOrderFromPayment(payment);
            
            if (orderResult.startsWith("SUCCESS:")) {
                String orderId = orderResult.substring(8); // Remove "SUCCESS:" prefix
                System.out.println("üéâ ORDER CREATION SUCCESS! Order ID: " + orderId);
                response.put("success", true);
                response.put("message", "Order created successfully");
                response.put("orderId", orderId);
                response.put("amount", payment.getPaidAmount());
                response.put("created", true);
            } else {
                System.err.println("‚ùå ORDER CREATION FAILED: " + orderResult);
                response.put("success", false);
                response.put("message", orderResult);
            }
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            System.err.println("üí• CONFIRM ORDER EXCEPTION: " + e.getMessage());
            e.printStackTrace();
            response.put("success", false);
            response.put("error", e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }
    
    /**
     * Helper method ƒë·ªÉ t·∫°o order t·ª´ payment data
     */
    private String createOrderFromPayment(Payment payment) {
        try {
            System.out.println("üöÄ Starting createOrderFromPayment for payment: " + payment.getPaymentId());
            
            // Parse checkout data t·ª´ Payment.transactionId 
            String checkoutDataStr = payment.getTransactionId();
            CheckoutRequest checkoutRequest = new CheckoutRequest();
            
            if (checkoutDataStr != null && checkoutDataStr.startsWith("CHECKOUT_DATA:")) {
                // ‚úÖ TH1: C√≥ checkout data ƒë·∫ßy ƒë·ªß
                checkoutDataStr = checkoutDataStr.substring("CHECKOUT_DATA:".length());
                String[] parts = checkoutDataStr.split("\\|");
                if (parts.length < 6) {
                    System.err.println("‚ùå Invalid checkout data format, parts.length: " + parts.length);
                    return "Invalid checkout data format";
                }
                
                String fullName = parts[0];
                String phone = parts[1];  
                String address = parts[2];
                String city = parts[3];
                String region = parts[4];
                String paymentMethod = parts[5];
                
                System.out.println("üì¶ Parsed checkout data: " + fullName + " | " + phone + " | " + address);
                
                checkoutRequest.setShippingAddress(address);
                checkoutRequest.setCity(city);
                checkoutRequest.setRegion(region);
                checkoutRequest.setPaymentMethod(paymentMethod);
                checkoutRequest.setAlternativeReceiverName(fullName);
                checkoutRequest.setAlternativeReceiverPhone(phone);
                
            } else {
                // ‚úÖ TH2: Payment c≈© kh√¥ng c√≥ checkout data - t·∫°o fallback
                System.out.println("‚ö†Ô∏è No checkout data found, creating fallback from user info...");
                
                UUID userId = payment.getUserId();
                User user = cartService.getUserById(userId);
                if (user == null) {
                    System.err.println("‚ùå User not found for userId: " + userId);
                    return "User not found";
                }
                
                // T·∫°o checkout data m·∫∑c ƒë·ªãnh t·ª´ user info
                checkoutRequest.setShippingAddress(user.getAddress() != null ? user.getAddress() : "ƒê·ªãa ch·ªâ kh√¥ng c√≥ s·∫µn");
                checkoutRequest.setCity("H√† N·ªôi"); // Default city
                checkoutRequest.setRegion("Mi·ªÅn B·∫Øc"); // Default region
                checkoutRequest.setPaymentMethod("VNPAY");
                checkoutRequest.setAlternativeReceiverName(user.getFullName() != null ? user.getFullName() : user.getUsername());
                checkoutRequest.setAlternativeReceiverPhone(user.getPhoneNumber() != null ? user.getPhoneNumber() : "0000000000");
                
                System.out.println("üì¶ Created fallback checkout data for user: " + user.getUsername());
            }
            
            // L·∫•y user
            UUID userId = payment.getUserId();
            User user = cartService.getUserById(userId);
            if (user == null) {
                System.err.println("‚ùå User not found for userId: " + userId);
                return "User not found";
            }
            
            System.out.println("üë§ Found user: " + user.getUsername() + " (ID: " + user.getUserId() + ")");
            
            // L·∫•y cart items
            List<Cart> cartItems = cartService.getCurrentUserCartByUserId(userId);
            if (cartItems == null || cartItems.isEmpty()) {
                System.err.println("‚ùå Cart is empty for user: " + user.getUsername());
                return "Cart is empty - Order cannot be created from paid payment without cart items";
            }
            
            System.out.println("üõí Found cart items: " + cartItems.size());
            for (Cart item : cartItems) {
                System.out.println("  - " + item.getProduct().getName() + " x" + item.getQuantity());
            }
            
            // ‚úÖ CH√çNH S·ª¨A: D√πng processCheckout thay v√¨ ch·ªâ createOrderWithVoucher
            // processCheckout s·∫Ω t·ª± ƒë·ªông: create order -> save order -> create order details -> clear cart
            System.out.println("üìù Creating order using processCheckout...");
            Order savedOrder = checkoutService.processCheckout(checkoutRequest, user, cartItems);
            
            if (savedOrder == null || savedOrder.getId() == null) {
                System.err.println("‚ùå Failed to save order - savedOrder is null or missing ID");
                return "Failed to save order";
            }
            
            System.out.println("‚úÖ Order created and saved successfully with ID: " + savedOrder.getId());
            
            // Update Payment v·ªõi Order ID  
            payment.setOrderId(UUID.fromString(savedOrder.getId()));
            paymentRepository.save(payment);
            
            System.out.println("‚úÖ Payment updated with orderId: " + savedOrder.getId());
            System.out.println("‚úÖ Cart automatically cleared by processCheckout");
            System.out.println("üéâ Order creation completed successfully!");
            
            return "SUCCESS:" + savedOrder.getId();
            
        } catch (Exception e) {
            System.err.println("‚ùå Error creating order from payment: " + e.getMessage());
            e.printStackTrace();
            return "Error creating order: " + e.getMessage();
        }
    }

    // Sau khi ho√†n t·∫•t thanh to√°n, VNPAY s·∫Ω chuy·ªÉn h∆∞·ªõng tr√¨nh duy·ªát v·ªÅ URL n√†y
    @GetMapping("/vnpay-payment-return")
    public String paymentCompleted(HttpServletRequest request, Model model){
        int paymentStatus = vnPayService.orderReturn(request);

        // L·∫•y th√¥ng tin t·ª´ VNPay response
        String orderInfo = request.getParameter("vnp_OrderInfo");
        String paymentTime = request.getParameter("vnp_PayDate");
        String transactionId = request.getParameter("vnp_TransactionNo");
        String totalPrice = request.getParameter("vnp_Amount");
        String responseCode = request.getParameter("vnp_ResponseCode");
        String txnRef = request.getParameter("vnp_TxnRef");
        String bankCode = request.getParameter("vnp_BankCode");
        String cardType = request.getParameter("vnp_CardType");

        // Format th·ªùi gian thanh to√°n
        if (paymentTime != null && !paymentTime.isEmpty()) {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
            
            try {
                LocalDateTime dateTime = LocalDateTime.parse(paymentTime, inputFormatter);
                String formattedDate = dateTime.format(outputFormatter);
                model.addAttribute("paymentTime", formattedDate);
            } catch (Exception e) {
                model.addAttribute("paymentTime", paymentTime);
            }
        }

        // Format s·ªë ti·ªÅn (VNPay tr·∫£ v·ªÅ amount * 100)
        if (totalPrice != null && totalPrice.length() > 2) {
            try {
                Long amount = Long.parseLong(totalPrice) / 100; // Chia 100 ƒë·ªÉ l·∫•y s·ªë ti·ªÅn g·ªëc
                model.addAttribute("totalPrice", formatCurrency(amount));
            } catch (NumberFormatException e) {
                model.addAttribute("totalPrice", "0 VND");
            }
        }

        // Th√™m th√¥ng tin chi ti·∫øt cho view
        model.addAttribute("orderId", orderInfo);
        model.addAttribute("transactionId", transactionId);
        model.addAttribute("txnRef", txnRef);
        model.addAttribute("bankCode", bankCode);
        model.addAttribute("cardType", cardType);
        model.addAttribute("paymentStatus", paymentStatus);
        
        // Th√™m message t·ª´ response code
        if (responseCode != null) {
            String responseMessage = VNPayConfig.getResponseMessage(responseCode);
            model.addAttribute("responseCode", responseCode);
            model.addAttribute("responseMessage", responseMessage);
        }

        // Redirect d·ª±a tr√™n k·∫øt qu·∫£
        if (paymentStatus == 1) {
            // ‚úÖ THANH TO√ÅN TH√ÄNH C√îNG - Update Payment status
            try {
                System.out.println("üéâ VNPay payment successful - Updating payment status...");
                
                // 1. Update Payment entity status
                Payment payment = paymentRepository.findByVnpTxnRef(txnRef);
                if (payment != null) {
                    payment.setPaymentStatus("PAID");
                    payment.setPaidAt(LocalDateTime.now());
                    payment.setVnpResponseCode(responseCode);
                    payment.setVnpTransactionStatus("Paid");
                    
                    // ‚úÖ FIX: Kh√¥ng ghi ƒë√® checkout data - l∆∞u VNPay transaction v√†o field ri√™ng
                    String existingTransactionId = payment.getTransactionId();
                    boolean hasCheckoutData = existingTransactionId != null && existingTransactionId.startsWith("CHECKOUT_DATA:");
                    
                    if (hasCheckoutData) {
                        // N·∫øu ƒë√£ c√≥ checkout data, l∆∞u VNPay transaction ID v√†o orderInfo thay v√¨ transactionId
                        if (transactionId != null) {
                            payment.setOrderInfo("VNP_TXN:" + transactionId);
                            System.out.println("‚úÖ Preserved checkout data, VNPay transaction saved to orderInfo: " + transactionId);
                        }
                    } else {
                        // N·∫øu ch∆∞a c√≥ checkout data, l∆∞u VNPay transaction ID nh∆∞ c≈©
                        if (transactionId != null) {
                            payment.setTransactionId(transactionId);
                            System.out.println("‚ö†Ô∏è No checkout data found, saved VNPay transaction to transactionId: " + transactionId);
                        }
                    }
                    
                    if (bankCode != null) {
                        payment.setBankCode(bankCode);
                    }
                    if (cardType != null) {
                        payment.setCardType(cardType);
                    }
                    paymentRepository.save(payment);
                    System.out.println("‚úÖ Payment updated successfully: " + payment.getPaymentId());
                    
                    // ‚úÖ T·∫†O ORDER V√Ä CLEAR CART T·ª∞ ƒê·ªòNG
                    try {
                        System.out.println("üöÄ Creating order automatically from Return URL...");
                        
                        // ‚úÖ FIX: Ki·ªÉm tra Order th·ª±c s·ª± trong database, kh√¥ng ch·ªâ payment.getOrderId()
                        boolean orderActuallyExists = false;
                        Order existingOrder = null;
                        
                        if (payment.getOrderId() != null) {
                            // Ki·ªÉm tra Order c√≥ th·ª±c s·ª± t·ªìn t·∫°i trong database kh√¥ng
                            try {
                                existingOrder = orderService.getOrderById(payment.getOrderId().toString());
                                orderActuallyExists = (existingOrder != null);
                                System.out.println("üîç Checked database - Order exists: " + orderActuallyExists + " (OrderId: " + payment.getOrderId() + ")");
                            } catch (Exception e) {
                                System.out.println("‚ö†Ô∏è Error checking Order in database: " + e.getMessage());
                                orderActuallyExists = false;
                            }
                        }
                        
                        if (!orderActuallyExists) {
                            // T·∫°o Order t·ª´ Payment data
                            String orderResult = createOrderFromPayment(payment);
                            
                            if (orderResult.startsWith("SUCCESS:")) {
                                String orderId = orderResult.substring(8); // Remove "SUCCESS:" prefix
                                System.out.println("‚úÖ Order created successfully from Return URL: " + orderId);
                                
                                model.addAttribute("title", "Thanh to√°n v√† ƒë·∫∑t h√†ng th√†nh c√¥ng");
                                model.addAttribute("result", "Th√†nh c√¥ng");
                                model.addAttribute("paymentId", payment.getPaymentId());
                                model.addAttribute("orderId", orderId);
                                model.addAttribute("hasOrder", true);
                                model.addAttribute("autoCreated", true);
                                
                            } else {
                                System.err.println("‚ùå Failed to create order from Return URL: " + orderResult);
                                model.addAttribute("title", "Thanh to√°n th√†nh c√¥ng");
                                model.addAttribute("result", "Th√†nh c√¥ng");
                                model.addAttribute("paymentId", payment.getPaymentId());
                                model.addAttribute("hasOrder", false);
                                model.addAttribute("warning", "Thanh to√°n ƒë√£ th√†nh c√¥ng. ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng, vui l√≤ng ƒë·ª£i...");
                                model.addAttribute("orderError", orderResult);
                            }
                        } else {
                            // Order th·ª±c s·ª± ƒë√£ t·ªìn t·∫°i trong database
                            System.out.println("‚úÖ Order confirmed to exist in database: " + payment.getOrderId());
                            model.addAttribute("title", "Thanh to√°n th√†nh c√¥ng");
                            model.addAttribute("result", "Th√†nh c√¥ng");
                            model.addAttribute("paymentId", payment.getPaymentId());
                            model.addAttribute("orderId", payment.getOrderId());
                            model.addAttribute("hasOrder", true);
                        }
                        
                    } catch (Exception orderException) {
                        System.err.println("‚ùå Exception creating order from Return URL: " + orderException.getMessage());
                        orderException.printStackTrace();
                        
                        // Fallback - thanh to√°n th√†nh c√¥ng nh∆∞ng Order c·∫ßn x·ª≠ l√Ω manual
                        model.addAttribute("title", "Thanh to√°n th√†nh c√¥ng");
                        model.addAttribute("result", "Th√†nh c√¥ng");
                        model.addAttribute("paymentId", payment.getPaymentId());
                        model.addAttribute("hasOrder", false);
                        model.addAttribute("warning", "Thanh to√°n ƒë√£ th√†nh c√¥ng. ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng li√™n h·ªá h·ªó tr·ª£ n·∫øu kh√¥ng th·∫•y ƒë∆°n h√†ng sau 5 ph√∫t.");
                    }
                    
                    return "payment/success";
                } else {
                    System.err.println("‚ùå Payment not found for txnRef: " + txnRef);
                }
                
            } catch (Exception e) {
                System.err.println("‚ùå Error processing VNPay success: " + e.getMessage());
                e.printStackTrace();
            }
            
            // Fallback
            model.addAttribute("title", "Thanh to√°n th√†nh c√¥ng");
            model.addAttribute("result", "Th√†nh c√¥ng");
            model.addAttribute("warning", "Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.");
            return "payment/success";
            
        } else if (paymentStatus == 0) {
            model.addAttribute("title", "Thanh to√°n th·∫•t b·∫°i");
            model.addAttribute("result", "Th·∫•t b·∫°i");
            return "payment/failed"; // Trang th·∫•t b·∫°i
        } else {
            model.addAttribute("title", "L·ªói x√°c th·ª±c thanh to√°n");
            model.addAttribute("result", "L·ªói");
            model.addAttribute("error", "Kh√¥ng th·ªÉ x√°c th·ª±c th√¥ng tin thanh to√°n");
            return "payment/error"; // Trang l·ªói x√°c th·ª±c
        }
    }


    // Helper method ƒë·ªÉ get username t·ª´ userId
    private String getUsernameFromUserId(UUID userId) {
        try {
            // C√≥ th·ªÉ c·∫ßn inject UserService ho·∫∑c UserRepository ·ªü ƒë√¢y
            // T·∫°m th·ªùi return userId string ƒë·ªÉ kh√¥ng b·ªã l·ªói
            return userId.toString();
        } catch (Exception e) {
            System.err.println("Error getting username from userId: " + e.getMessage());
            return null;
        }
    }

    // Utility method ƒë·ªÉ format currency
    private String formatCurrency(long amount) {
        return String.format("%,d VND", amount);
    }


} 